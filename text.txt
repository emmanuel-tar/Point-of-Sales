previous



import tkinter as tk
from tkinter import ttk, simpledialog
import mysql.connector


# Function to fetch items from the database
def fetch_items_from_db():
    conn = mysql.connector.connect(
        user="root",
        password="root",
        host="localhost",
        database="pos",
        port="1207",  # Update port if needed
    )
    cursor = conn.cursor()

    # Fetch items from the item table
    cursor.execute("SELECT item_description, price FROM items")
    items = cursor.fetchall()

    conn.close()
    return items


# Function to open the Sales Screen
def open_sales_screen():
    sales_window = tk.Toplevel()  # Create a new window for the sales screen
    sales_window.title("Sales Screen")
    sales_window.geometry("1000x600")  # Adjusted window size

    # Left Frame for Displaying orders
    left_frame = tk.Frame(sales_window)
    left_frame.pack(side="left", padx=10, pady=20)

    # TreeView for the Order Items
    tree = ttk.Treeview(
        left_frame, columns=("Item", "Price"), show="headings", height=20
    )
    tree.heading("Item", text="Item")
    tree.heading("Price", text="Price")
    tree.pack()

    # Label for the total price
    total_label = tk.Label(left_frame, text="Total: =N=0.00", font=("Arial", 14))
    total_label.pack(pady=10)

    total_price = 0  # Initialize total price

    # Function to update the total price label
    def update_total_price():
        nonlocal total_price
        total_price = 0  # Reset total price
        for row in tree.get_children():
            price_value = tree.item(row)["values"][1]  # Get price value from each row
            price_value = float(
                price_value.strip("=N=")
            )  # Convert from string to float
            total_price += price_value
        total_label.config(text=f"Total: =N={total_price:.2f}")  # Update total label

    # Function to add items to the order
    def add_to_order(item, price):
        # Add the item to the Treeview
        tree.insert("", "end", values=(item, f"=N={price:.2f}"))
        update_total_price()  # Update the total price label

    # Create a frame for the item buttons (right side)
    right_frame = tk.Frame(sales_window)
    right_frame.pack(pady=20, padx=20, expand=True, fill="both")

    # Fetch items from the database
    items = fetch_items_from_db()

    # Display items as buttons in a grid layout
    row = 0
    col = 0
    for item, price in items:
        button = tk.Button(
            right_frame,
            text=f"{item}\n=N={price:.2f}",
            bg="lightgreen",
            font=("Arial", 12),
            width=20,
            height=5,
            command=lambda i=item, p=price: add_to_order(i, p),
        )
        button.grid(row=row, column=col, padx=5, pady=5)
        col += 1
        if col == 5:  # Wrap to the next row after 5 buttons
            row += 1
            col = 0

    # Buttons for operations at the bottom
    bottom_frame = tk.Frame(sales_window)
    bottom_frame.pack(side="bottom", pady=20)

    operations = [
        ("Fire", "green"),
        ("Enter", "green"),
        ("Customers", "green"),
        ("Order", "green"),
        ("Back", "red"),
        ("Close", "red"),
    ]

    # Create buttons for operations in the bottom frame
    for operation, color in operations:
        op_button = tk.Button(
            bottom_frame,
            text=operation,
            bg=color,
            font=("Arial", 12),
            width=10,
            height=2,
        )
        op_button.pack(side="left", padx=10)

    # Frame for additional buttons (Add, Delete, Void, Change Price) below the TreeView
    additional_button_frame = tk.Frame(left_frame)
    additional_button_frame.pack(pady=20)

    # Define button functions
    def void_item():
        selected_item = tree.selection()  # Get selected item in the TreeView
        if selected_item:
            # Get the price of the selected item before deleting it
            item_price = tree.item(selected_item, "values")[1]
            item_price = float(item_price.strip("=N="))  # Convert to float

            # Remove the item from the TreeView
            tree.delete(selected_item)

            # Update total price after removal
            update_total_price()

    def delete_item():
        selected_item = tree.selection()
        if selected_item:
            tree.delete(selected_item)
            update_total_price()  # Update the total price after deletion

    def change_price():
        selected_item = tree.selection()  # Get the selected item from the TreeView
        if selected_item:
            # Get the current item price and description
            item_description = tree.item(selected_item, "values")[0]
            old_price = tree.item(selected_item, "values")[1]
            old_price = float(old_price.strip("=N="))  # Convert to float

            # Ask the user for a new price using an input dialog
            new_price = simpledialog.askfloat(
                "Change Price",
                f"Enter new price for {item_description}:",
                initialvalue=old_price,
            )

            if new_price is not None:  # If the user doesn't cancel the input
                # Update the TreeView with the new price
                tree.item(
                    selected_item, values=(item_description, f"=N={new_price:.2f}")
                )

                # Update total price after price change
                update_total_price()

    # Add buttons for additional operations
    add_button = tk.Button(additional_button_frame, text="Add", width=10)
    add_button.grid(row=0, column=0, padx=5)

    del_button = tk.Button(
        additional_button_frame, text="Del", width=10, command=delete_item
    )
    del_button.grid(row=0, column=1, padx=5)

    void_button = tk.Button(
        additional_button_frame, text="Void", width=10, command=void_item
    )
    void_button.grid(row=0, column=2, padx=5)

    change_price_button = tk.Button(
        additional_button_frame, text="Change Price", width=15, command=change_price
    )
    change_price_button.grid(row=0, column=3, padx=5)

    sales_window.mainloop()
